{#- macro: render_commit -#}
{%- macro render_commit(commit) -%}
{#- Email to GitHub username mapping -#}
{%- set email_to_github = {
  'babak@farrokhi.net': 'farrokhi',
  'babakfarrokhi@optiver.com': 'farrokhi',
  'bfarrokhi@transip.nl': 'farrokhi',
} -%}
{%- if '@users.noreply.github.com' in commit.author_email -%}
  {%- set username_part = commit.author_email.split('@')[0] -%}
  {%- if '+' in username_part -%}
    {%- set author_login = username_part.split('+')[1] -%}
  {%- else -%}
    {%- set author_login = username_part -%}
  {%- endif -%}
  {%- set author_display = "@" + author_login -%}
  {%- set author_url = "https://github.com/" + author_login -%}
{%- elif commit.author_email in email_to_github -%}
  {%- set author_login = email_to_github[commit.author_email] -%}
  {%- set author_display = "@" + author_login -%}
  {%- set author_url = "https://github.com/" + author_login -%}
{%- else -%}
  {%- set author_display = commit.author_name -%}
  {%- set author_url = "" -%}
{%- endif -%}
- {{ commit.convention.subject|default(commit.subject) }} ([{{ commit.hash|truncate(7, True, '') }}]({{ commit.url }}) by {% if author_url %}[{{ author_display }}]({{ author_url }}){% else %}{{ author_display }}{% endif %}).
{%- if commit.text_refs.issues_not_in_subject %} Related issues/PRs: {% for issue in commit.text_refs.issues_not_in_subject -%}
{% if issue.url %}[{{ issue.ref }}]({{ issue.url }}){% else %}{{ issue.ref }}{% endif %}{% if not loop.last %}, {% endif -%}
{%- endfor -%}{%- endif -%}
{%- for trailer_name, trailer_value in commit.trailers -%}
{%- if trailer_value|is_url %} [{{ trailer_name }}]({{ trailer_value }})
{%- else %} {{ trailer_name }}: {{ trailer_value }}{% endif %}
{%- if not loop.last %},{% endif %}
{%- endfor -%}
{%- endmacro -%}

{#- macro: render_section -#}
{%- macro render_section(section) -%}
### {{ section.type or "Misc" }}

{% for commit in section.commits|sort(attribute='author_date',reverse=true)|unique(attribute='subject') -%}
{{ render_commit(commit) }}
{% endfor %}
{%- endmacro -%}

{#- macro: render_version -#}
{%- macro render_version(version) -%}
{%- if version.tag or version.planned_tag -%}
## [{{ version.tag or version.planned_tag }}]({{ version.url }}){% if version.date %} - {{ version.date }}{% endif %}

<small>[Compare with {{ version.previous_version.tag|default("first commit") }}]({{ version.compare_url }})</small>
{%- else -%}
## Unreleased

<small>[Compare with latest]({{ version.compare_url }})</small>
{%- endif %}
{% for type in changelog.sections %}
{%- if type in version.sections_dict %}
{%- with section = version.sections_dict[type] %}
{{ render_section(section) }}
{%- endwith %}
{%- endif %}
{%- endfor %}
{%- if not (version.tag or version.planned_tag) %}
<!-- insertion marker -->{% endif %}
{% endmacro -%}

{#- template -#}
{%- if not in_place -%}
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).

{% endif %}<!-- insertion marker -->
{% for version in changelog.versions_list -%}
{{ render_version(version) }}
{%- endfor -%}
